/**
@author Logan Jones <a href="mailto:logan.jones1@ucalgary.ca">
	Logan.Jones1@ucalgary.ca</a>
@version	1.9
@since		1.0
 */

package edu.ucalgary.ensf409;

import static org.junit.Assert.*;
import org.junit.*;
import java.sql.*;
import java.util.LinkedList;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class Tests {
	public static Connection dbConnection;
	
	public static void initializeConnection() {
		/*
		 * Establishes a connection to the test database.
		 */
		try {
		 Tests.dbConnection = DriverManager.getConnection("jdbc:mysql://localhost/inventory","Jones","ensf409");
		} 
		catch(SQLException e) {
			System.out.println("Cannot connect to the database");
            e.printStackTrace();
            System.exit(1);
		}
	}
	
	@Test
	public void testFindBestCombinationMeshChairPrice() {
		/*
		 * Tests if an order was placed for one mesh chair that it would produce the 
		 * proper price of 150. This is found by inspection of the test database.
		 */
		Tests.initializeConnection();
		LowestCost test = new LowestCost(Tests.dbConnection, "Chair", "Mesh", 1);
		// make a LowestCost object and then run the findBestComibination() method.
		FurnitureOrder testResult = test.findBestCombination();
		
		assertEquals("Failure on LowestCost with 1 mesh chair", 150, testResult.getPrice());
		// .getPrice() returns the member field of int price from the LowestCost object
		// that should have been generated by the findBestCombination() method, which
		// should be 150.
	}
	
	@Test
	public void testFindBestCombinationTwoTraditionalDesksPrice() {
		/*
		 * Tests if an order was placed for two traditional desks that it would produce the 
		 * proper price of 200. This is found by inspection of the test database.
		 */
		Tests.initializeConnection();
		LowestCost test = new LowestCost(Tests.dbConnection, "Desk", "Traditional", 2);
		// make a LowestCost object and then run the findBestComibination() method.
		FurnitureOrder testResult = test.findBestCombination();
		
		assertEquals("Failure on LowestCost with 2 traditional desks", 200, testResult.getPrice());
		// .getPrice() returns the member field of int price from the LowestCost object
		// that should have been generated by the findBestCombination() method, which
		// should be 200.
	}
	
	@Test
	public void testFindBestCombinationKneelingChairPrice() {
		/*
		 * Tests if an order was placed for one kneeling chair that it would produce the 
		 * proper price of 0. This is found by inspection of the test database.
		 */
		Tests.initializeConnection();
		LowestCost test = new LowestCost(Tests.dbConnection, "Chair", "Kneeling", 1);
		// make a LowestCost object and then run the findBestComibination() method.
		FurnitureOrder testResult = test.findBestCombination();
		
		assertEquals("Failure on LowestCost with 1 kneeling chair", 0, testResult.getPrice());
		// .getPrice() returns the member field of int price from the LowestCost object
		// that should have been generated by the findBestCombination() method, which
		// should be 0 because the order can not be completed due to lack of parts.
	}
	
	@Test
	public void testFindBestCombinationMeshChairParts() {
		/*
		 * Tests if an order was placed for one mesh chair that it would produce the 
		 * proper list of items that require to fulfill the order.
		 * This is found by inspection of the test database.
		 */
		Tests.initializeConnection();
		
		LinkedList<String> testIDList = new LinkedList<>();
		// Make a list of expected items to be oredered for one mesh chair.
		testIDList.add("C0942");
		testIDList.add("C9890");
		
		LowestCost test = new LowestCost(Tests.dbConnection, "Chair", "Mesh", 1);
		// Make a LowestCost object and then run the findBestComibination() method.
		FurnitureOrder testResult = test.findBestCombination();
		
		boolean idListsSame = false;
		// Check if the furnitureIDList in FurnitureOrder testResult is the same as
		// testIDList. If so, set boolean idListsSame to true.
		if(testIDList.equals(testResult.getFurnitureIDList()))
			idListsSame = true;
		
		assertEquals("Failure on LowestCost item list with 1 mesh chair", true, idListsSame);
		// boolean idListsSame should be true if the FurnitureOrder testResults' furnitureIDList
		// is the same as the testIDList. If not this test will fail.
	}
	
	@Test
	public void testWriteOrderFormOne() {
		/*
		 * Tests if an order was placed for one Cool Logan that it would produce the 
		 * proper orderform.text file. This is found by inspection of the test database.
		 */
		LinkedList<String> furnitureIDList = new LinkedList<>();
		// Create the funitureIDList with fake Cool Logan parts.
		furnitureIDList.add("L001");
		furnitureIDList.add("P010");
		furnitureIDList.add("J100");
		furnitureIDList.add("J111");
		
		// Calls the writeOrderForm to produce the orderform.text file for one
		// Cool Logan with the above list of parts and a price of $10,000.
		OrderForm.writeOrderForm("Cool", "Logan", 1, furnitureIDList, 10000);
		
		boolean filesSame = true;
		// Open the recently created orderform.text and the test case .text file:
		// testOrderForm.text.
		try {
			FileReader file = new FileReader("orderform.text");
			FileReader testFile = new FileReader("testOrderForm.text");
			
			BufferedReader bFile = new BufferedReader(file);
			BufferedReader bTestFile = new BufferedReader(testFile);
			
			String readerStr;
			// Read both of the files line by line and checks if there is any
			// differences. If so, set the boolean filesSame to false.
			while((readerStr = bFile.readLine()) != null) {
				if(readerStr.equals(bTestFile.readLine()))
					System.out.print("");
				else 
					filesSame = false;
			}
			// Properly close files.
			bFile.close();
			bTestFile.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.exit(1);
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}
		
		assertEquals("Failure on OrderForm with 1 Cool Logan", true, filesSame);
		// boolean filesSame should be true if the orderform.text file was made to
		// expected layout. If not this test will fail.
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
}
